Microsoft (R) Macro Assembler Version 14.28.29333.0	    12/06/20 19:43:33
!Project_6    (Proj6_moorbrea.asm			     Page 1 - 1


				TITLE Project_6    (Proj6_moorbrea.asm)

				; Author: Breanna Moore
				; Last Modified: 11/30/2020
				; OSU email address: moorbrea@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 12/6/2020
				; Description: This program uses macros and procedures to collect 10 user inputted string and
				; converts them into signed integers that fit into a 32-bit register. The total sum and rounded
				; average are calculated. The program then converts the validated user input's back into strings,
				; as well as converting the calculated sum and rounded average into strings and displays the results.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; This macro displays a prompt to get a user input of a signed integer. The user's
				; input must match count. The size of the string is stored.
				;
				; Preconditions: strings to be displayed and read must be type BYTE. 
				;
				; Postconditions: None
				;
				; Receives: prompt = address of string to be displayed
				;			userInput = address of where user input to be stored
				;			count = MAXSIZE
				;			userInput_size = size of user input's string
				; Returns: Returns user's input and user input's size.
				; ---------------------------------------------------------------------------------
				mGetString   MACRO   prompt, userInput, count, userInput_size
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX

					mDisplayString prompt
					MOV		EDX, userInput
					MOV		ECX, count
					CALL	ReadString
					MOV		userInput_size, EAX

					POP		EAX
					POP		ECX
					POP		EDX

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; The description of the macro should be like a section comment, summarizing
				; the overall goal of the blocks of code within the macro.
				;
				; Preconditions: string must be type BYTE and passed by reference.
				;
				; Postconditions: None
				;
				; Receives: Address of a string
				;
				; Returns: Displays the string passed to macro.
				; ---------------------------------------------------------------------------------
				mDisplayString   MACRO    someMsg_address
					PUSH	EDX
					MOV		EDX, someMsg_address
					CALL	WriteString
					POP		EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mTempString
				;
				; This macro receives the address of a string and stores null values up to the
				; specified length.
				;
				; Preconditions: string must be type BYTE.
				;
				; Postconditions: None
				;
				; Receives: string_address = string to be changed
				;			length = size of string to be changed
				; Returns: Fills a string with a given length with null values.
				; ---------------------------------------------------------------------------------
				mTempString		MACRO	string_address, length
					LOCAL	L1
					PUSH	EAX
					PUSH	ECX
					PUSH	EDI

					MOV		EDI, string_address
					MOV		ECX, length
					MOV		AL, 0
					CLD
				L1:
					STOSB
					LOOP	L1

					POP		EDI
					POP		ECX
					POP		EAX
				ENDM

				; (insert constant definitions here)
 = 0000000A			ARRAYSIZE = 10
 = 0000000C			MAXSIZE = 12

 00000000			.data

				; (insert variable definitions here)
 00000000 50 72 6F 6A 65	intro1			BYTE		"Project 6: String Primitives and Macros",13,10,"Programmed by: Breanna Moore",13,10,13,10,0
	   63 74 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 0D
	   0A 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 3A
	   20 42 72 65 61
	   6E 6E 61 20 4D
	   6F 6F 72 65 0D
	   0A 0D 0A 00
 0000004A 57 65 6C 63 6F	intro2			BYTE		"Welcome to my program!",13,10,13,10,
	   6D 65 20 74 6F
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 21 0D 0A 0D
	   0A 50 6C 65 61
	   73 65 20 70 72
	   6F 76 69 64 65
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 0D 0A
	   45 61 63 68 20
	   69 6E 74 65 67
	   65 72 20 6D 75
	   73 74 20 62 65
	   20 73 6D 61 6C
	   6C 20 65 6E 6F
	   75 67 68 20 74
	   6F 20 66 69 74
	   20 69 6E 73 69
	   64 65 20 61 20
	   33 32 2D 62 69
	   74 20 72 65 67
	   69 73 74 65 72
	   2E 20 41 66 74
	   65 72 20 79 6F
	   75 20 68 61 76
	   65 20 69 6E 70
	   75 74 74 65 64
	   20 31 30 20 69
	   6E 74 65 67 65
	   72 73 2C 0D 0A
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 2E 0D
	   0A 0D 0A 00
											"Please provide 10 signed decimal integers.",13,10,
											"Each integer must be small enough to fit inside a 32-bit register. After you have inputted 10 integers,",13,10,
											"this program will display a list of the integers, their sum, and their average.",13,10,13,10,0
 0000014D 50 6C 65 61 73	prompt1			BYTE		"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 0000016D 45 52 52 4F 52	errorMsg		BYTE		"ERROR: You did not enter an integer or the integer does not fit in a 32-bit register!",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 69 6E
	   74 65 67 65 72
	   20 6F 72 20 74
	   68 65 20 69 6E
	   74 65 67 65 72
	   20 64 6F 65 73
	   20 6E 6F 74 20
	   66 69 74 20 69
	   6E 20 61 20 33
	   32 2D 62 69 74
	   20 72 65 67 69
	   73 74 65 72 21
	   0D 0A 00
 000001C5 50 6C 65 61 73	inputRetry		BYTE		"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001D8 54 68 61 6E 6B	byeMsg			BYTE		"Thank you for using my program! Goodbye!",13,10,0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 47 6F 6F
	   64 62 79 65 21
	   0D 0A 00
 00000203  0000000C [		userNumString	BYTE		MAXSIZE DUP(?)
	    00
	   ]
 0000020F 00			userNumSize		BYTE		?		
 00000210 00000000		sum				SDWORD		?
 00000214 00000000		roundAvg		SDWORD		?
 00000218  0000000A [		intArray		SDWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 00000240 00000000		counter			DWORD		0
 00000244 0D 0A 59 6F 75	prompt2			BYTE		13,10,"You entered the following integers:",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 69 6E
	   74 65 67 65 72
	   73 3A 0D 0A 00
 0000026C 0D 0A 54 68 65	sumMsg			BYTE		13,10,"The sum of your integers is: ",0
	   20 73 75 6D 20
	   6F 66 20 79 6F
	   75 72 20 69 6E
	   74 65 67 65 72
	   73 20 69 73 3A
	   20 00
 0000028C 20 00			space			BYTE		" ",0
 0000028E 0D 0A 54 68 65	avgMsg			BYTE		13,10,"The rounded average is: ",0
	   20 72 6F 75 6E
	   64 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00


 00000000			.code
 00000000			main PROC

				; Greet user and display instructions
 00000000  68 00000000 R		PUSH	OFFSET intro1
 00000005  68 0000004A R		PUSH	OFFSET intro2
 0000000A  E8 00000097			CALL	Introduction

				; Get user input, validate inputs, & store in array
 0000000F  FF 35 00000240 R		PUSH	counter
 00000015  68 00000218 R		PUSH	OFFSET intArray
 0000001A  6A 0A			PUSH	ARRAYSIZE
 0000001C  68 000001C5 R		PUSH	OFFSET inputRetry
 00000021  68 0000014D R		PUSH	OFFSET prompt1
 00000026  68 0000016D R		PUSH	OFFSET errorMsg
 0000002B  6A 0C			PUSH	MAXSIZE
 0000002D  68 00000203 R		PUSH	OFFSET userNumString
 00000032  68 0000020F R		PUSH	OFFSET userNumSize
 00000037  E8 00000085			CALL	ReadVal

				; Display user's validated numbers
 0000003C  68 00000218 R		PUSH	OFFSET intArray
 00000041  6A 0A			PUSH	ARRAYSIZE
 00000043  68 0000028C R		PUSH	OFFSET space
 00000048  68 00000244 R		PUSH	OFFSET prompt2
 0000004D  E8 00000221			CALL	DisplayArray
				; Calculate Sum
 00000052  68 00000218 R		PUSH	OFFSET intArray
 00000057  6A 0A			PUSH	ARRAYSIZE
 00000059  68 00000210 R		PUSH	OFFSET sum
 0000005E  E8 00000246			CALL	CalculateSum	

				; Display sum
 00000063  FF 35 00000210 R		PUSH	sum
 00000069  68 0000026C R		PUSH	OFFSET sumMsg
 0000006E  E8 00000260			CALL	DisplaySum
				; Calculate rounded average
 00000073  68 00000214 R		PUSH	OFFSET roundAvg
 00000078  6A 0A			PUSH	ARRAYSIZE
 0000007A  FF 35 00000210 R		PUSH	sum
 00000080  E8 0000026F			CALL	RoundedAverage	

				; Display rounded average
 00000085  FF 35 00000214 R		PUSH	roundAvg
 0000008B  68 0000028E R		PUSH	OFFSET avgMsg
 00000090  E8 0000027C			CALL	DisplayAvg

				; Say goodbye to user
 00000095  68 000001D8 R		PUSH	OFFSET byeMsg
 0000009A  E8 00000293			CALL	Goodbye

					Invoke ExitProcess,0	; exit to operating system
 0000009F  6A 00	   *	    push   +000000000h
 000000A1  E8 00000000 E   *	    call   ExitProcess
 000000A6			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; Introduces the program and programmer. Describes what user must enter and what
				; the program will display.
				; Preconditions: intro1 and intro2 type BYTE.
				; Postconditions: EDX changed by WriteString
				; Receives: [EBP+12] = reference to intro1, [EBP+8] = reference to intro2
				; Returns:  None
				; ---------------------------------------------------------------------------------
 000000A6			Introduction PROC
 000000A6  55				PUSH	EBP
 000000A7  8B EC			MOV		EBP, ESP
					mDisplayString [EBP+12]
 000000A9  52		     1		PUSH	EDX
 000000AA  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000AD  E8 00000000 E     1		CALL	WriteString
 000000B2  5A		     1		POP		EDX
					mDisplayString [EBP+8]
 000000B3  52		     1		PUSH	EDX
 000000B4  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000B7  E8 00000000 E     1		CALL	WriteString
 000000BC  5A		     1		POP		EDX

 000000BD  5D				POP		EBP
 000000BE  C2 0008			RET		8
 000000C1			Introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; This procedure prompts user to input 10 valid signed integers. The input is
				; converted from type byte to SDWORD and then stored in the array. If the user 
				; enters invalud input, an error message is displayed and user is prompted
				; again for a new input.
				;
				; Preconditions: Prompts must be type BYTE, size of user input must be type
				; BYTE, intArray must be type SDWORD and match ARRAYSIZE.
				;
				; Postconditions: None
				;
				; Receives: [EBP+40] = counter to track sign
				;			[EBP+36] = address of intArray
				;			[EBP+32] = ARRAYSIZE
				;			[EBP+28] = address of inputRetry
				;			[EBP+24] = address of prompt1
				;			[EBP+20] = address of error message
				;			[EBP+16] = MAXSIZE
				;			[EBP+12] = address of user's string input
				;			[EBP+8] = Size of user's string
				; Returns: Changes the values in the intArray to validated user inputs.
				; ---------------------------------------------------------------------------------
 000000C1			ReadVal PROC
 000000C1  55				PUSH	EBP
 000000C2  8B EC			MOV		EBP, ESP
 000000C4  56				PUSH	ESI
 000000C5  57				PUSH	EDI
 000000C6  51				PUSH	ECX
 000000C7  50				PUSH	EAX
 000000C8  53				PUSH	EBX
 000000C9  52				PUSH	EDX

				; Set EDI to point to intArray
 000000CA  8B 7D 24			MOV		EDI, [EBP+36]
 000000CD  8B 4D 20			MOV		ECX, [EBP+32]
 000000D0  51				PUSH	ECX
 000000D1  EB 01			JMP		_getString

 000000D3			_nextInput:
					; ECX tracks number of elements for array
 000000D3  51				PUSH	ECX
 000000D4			_getString:
				; Prompt user and get user's input	
					mGetString [EBP+24], [EBP+12], [EBP+16], [EBP+8]
 000000D4  52		     1		PUSH	EDX
 000000D5  51		     1		PUSH	ECX
 000000D6  50		     1		PUSH	EAX
 000000D7  52		     2		PUSH	EDX
 000000D8  8B 55 18	     2		MOV		EDX, [EBP+24]
 000000DB  E8 00000000 E     2		CALL	WriteString
 000000E0  5A		     2		POP		EDX
 000000E1  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000E4  8B 4D 10	     1		MOV		ECX, [EBP+16]
 000000E7  E8 00000000 E     1		CALL	ReadString
 000000EC  89 45 08	     1		MOV		[EBP+8], EAX
 000000EF  58		     1		POP		EAX
 000000F0  59		     1		POP		ECX
 000000F1  5A		     1		POP		EDX
 000000F2  EB 0D			JMP		_start

 000000F4			_updateArray:
					; Move finalized number
 000000F4  89 0F			MOV		[EDI], ECX
 000000F6  83 C7 04			ADD		EDI, 4
 000000F9  59				POP		ECX
 000000FA  E2 D7			LOOP	_nextInput
 000000FC  E9 000000AE			JMP		_end

 00000101			_start:
				; Check user input's size: Zero indicates no input
 00000101  8B 45 08			MOV		EAX, [EBP+8]
 00000104  83 F8 00			CMP		EAX, 0
 00000107  74 3B			JE		_inputError

 00000109  8B 75 0C			MOV		ESI, [EBP+12]
 0000010C  FC				CLD
					; Set ECX to number total
 0000010D  B9 00000000			MOV		ECX, 0

 00000112			_validate:
 00000112  B8 00000000			MOV		EAX, 0
 00000117  AC				LODSB

					; check if byte is zero: Indicates end of string 
 00000118  3C 00			CMP		AL, 0
 0000011A  74 73			JE		_finalize

 0000011C  3C 30			CMP		AL, 48
 0000011E  72 59			JB		_checkSign
 00000120  3C 39			CMP		AL, 57
 00000122  77 20			JA		_inputError

					; Convert to digit and store
 00000124  2C 30			SUB		AL, 48
 00000126  50				PUSH	EAX

					; Multiply number total by 10
 00000127  8B C1			MOV		EAX, ECX
 00000129  BB 0000000A			MOV		EBX, 10
 0000012E  F7 EB			IMUL	EBX

					; Add current number
 00000130  5B				POP		EBX
 00000131  03 C3			ADD		EAX, EBX

					; Check carry flag
 00000133  70 0F			JO		_inputError

					; Update number total
 00000135  8B C8			MOV		ECX, EAX

					; Update sign counter
 00000137  8B 5D 28			MOV		EBX, [EBP+40]
 0000013A  BB 00000001			MOV		EBX, 1
 0000013F  89 5D 28			MOV		[EBP+40], EBX
					
 00000142  EB CE			JMP		_validate

 00000144			_inputError:
					; Reset sign counter
 00000144  8B 5D 28			MOV		EBX, [EBP+40]
 00000147  BB 00000000			MOV		EBX, 0
 0000014C  89 5D 28			MOV		[EBP+40], EBX

					; Prompt user with error message & get new user input
					mDisplayString [EBP+20]
 0000014F  52		     1		PUSH	EDX
 00000150  8B 55 14	     1		MOV		EDX, [EBP+20]
 00000153  E8 00000000 E     1		CALL	WriteString
 00000158  5A		     1		POP		EDX
					mGetString [EBP+28], [EBP+12], [EBP+16], [EBP+8]
 00000159  52		     1		PUSH	EDX
 0000015A  51		     1		PUSH	ECX
 0000015B  50		     1		PUSH	EAX
 0000015C  52		     2		PUSH	EDX
 0000015D  8B 55 1C	     2		MOV		EDX, [EBP+28]
 00000160  E8 00000000 E     2		CALL	WriteString
 00000165  5A		     2		POP		EDX
 00000166  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000169  8B 4D 10	     1		MOV		ECX, [EBP+16]
 0000016C  E8 00000000 E     1		CALL	ReadString
 00000171  89 45 08	     1		MOV		[EBP+8], EAX
 00000174  58		     1		POP		EAX
 00000175  59		     1		POP		ECX
 00000176  5A		     1		POP		EDX
 00000177  EB 88			JMP		_start

 00000179			_checkSign:
 00000179  8B 5D 28			MOV		EBX, [EBP+40]
 0000017C  83 FB 01			CMP		EBX, 1
 0000017F  74 C3			JE		_inputError
 00000181  3C 2B			CMP		AL, 43
 00000183  72 BF			JB		_inputError
 00000185  3C 2C			CMP		AL, 44
 00000187  74 BB			JE		_inputError
 00000189  3C 2D			CMP		AL, 45
 0000018B  77 B7			JA		_inputError
 0000018D  EB 83			JMP		_validate

 0000018F			_finalize:
					; Reset sign counter
 0000018F  8B 5D 28			MOV		EBX, [EBP+40]
 00000192  BB 00000000			MOV		EBX, 0
 00000197  89 5D 28			MOV		[EBP+40], EBX

					; Grab first character again to check for negative sign
 0000019A  8B 75 0C			MOV		ESI, [EBP+12]
 0000019D  FC				CLD
 0000019E  AC				LODSB
 0000019F  3C 2D			CMP		AL, 45
 000001A1  74 05			JE		_Negate
 000001A3  E9 FFFFFF4C			JMP		_updateArray

 000001A8			_Negate:
 000001A8  F7 D9			NEG		ECX
 000001AA  E9 FFFFFF45			JMP		_updateArray

 000001AF			_end:
 000001AF  5A				POP		EDX
 000001B0  5B				POP		EBX
 000001B1  58				POP		EAX
 000001B2  59				POP		ECX
 000001B3  5F				POP		EDI
 000001B4  5E				POP		ESI
 000001B5  5D				POP		EBP

 000001B6  C2 0024			RET		36
 000001B9			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; This procedure receives a signed integer value and converts into a string.
				;
				; Preconditions: Preconditions are conditions that need to be true for the
				; procedure to work, like the type of the input provided or the state a
				; certain register need to be in.
				;
				; Postconditions: None
				;
				; Receives: Signed integer value to be converted into a string.
				;			[EBP-4] = local variable to track whether value is negative
				;			[EBP-24] = Local string to store converted characters
				;			[EBP-44] = Local string to store reversed order of converted string
				; Returns: Displays converted string.
				; ---------------------------------------------------------------------------------
 000001B9			WriteVal PROC
 000001B9  55				PUSH	EBP
 000001BA  8B EC			MOV		EBP, ESP

					; Procedure local variables
 000001BC  83 EC 04			SUB		ESP, 4		; Track sign
 000001BF  83 EC 14			SUB		ESP, 20		; String to be converted
 000001C2  83 EC 14			SUB		ESP, 20		; String used to reverse
 000001C5  50				PUSH	EAX
 000001C6  53				PUSH	EBX
 000001C7  51				PUSH	ECX
 000001C8  52				PUSH	EDX
 000001C9  57				PUSH	EDI
 000001CA  56				PUSH	ESI

					; Create temp strings 
 000001CB  8D 7D E8			LEA		EDI, [EBP-24]
					mTempString EDI, 20
 000001CE  50		     1		PUSH	EAX
 000001CF  51		     1		PUSH	ECX
 000001D0  57		     1		PUSH	EDI
 000001D1  8B FF	     1		MOV		EDI, EDI
 000001D3  B9 00000014	     1		MOV		ECX, 20
 000001D8  B0 00	     1		MOV		AL, 0
 000001DA  FC		     1		CLD
 000001DB		     1	??0000:
 000001DB  AA		     1		STOSB
 000001DC  E2 FD	     1		LOOP	??0000
 000001DE  5F		     1		POP		EDI
 000001DF  59		     1		POP		ECX
 000001E0  58		     1		POP		EAX
 000001E1  8D 7D D4			LEA		EDI, [EBP-44]
					mTempString EDI, 20
 000001E4  50		     1		PUSH	EAX
 000001E5  51		     1		PUSH	ECX
 000001E6  57		     1		PUSH	EDI
 000001E7  8B FF	     1		MOV		EDI, EDI
 000001E9  B9 00000014	     1		MOV		ECX, 20
 000001EE  B0 00	     1		MOV		AL, 0
 000001F0  FC		     1		CLD
 000001F1		     1	??0001:
 000001F1  AA		     1		STOSB
 000001F2  E2 FD	     1		LOOP	??0001
 000001F4  5F		     1		POP		EDI
 000001F5  59		     1		POP		ECX
 000001F6  58		     1		POP		EAX

					; Check sign of integer, Negate if negative
 000001F7  8B 45 08			MOV		EAX, [EBP+8]
 000001FA  A9 FFFFFFFF			TEST	EAX, -1
 000001FF  79 09			JNS		_CheckZero
 00000201  C7 45 FC			MOV		DWORD PTR [EBP-4], 1		; change local track sign variable
	   00000001
 00000208  F7 D8			NEG		EAX

				; Check if value is zero
 0000020A			_CheckZero:
 0000020A  83 F8 00			CMP		EAX, 0
 0000020D  75 09			JNE		_Start
 0000020F  8D 7D D4			LEA		EDI, [EBP-44]
 00000212  FC				CLD
 00000213  B0 30			MOV		AL, 48
 00000215  AA				STOSB
 00000216  EB 43			JMP		_display

				; Convert integer into string
 00000218			_Start:
 00000218  8D 7D E8			LEA		EDI, [EBP-24]
 0000021B  B9 00000000			MOV		ECX, 0
 00000220  FC				CLD
 00000221			_GetNumLoop:
 00000221  83 F8 00			CMP		EAX, 0		; When end of string reached, check sign
 00000224  76 18			JNA		_Sign
 00000226  BA 00000000			MOV		EDX, 0
 0000022B  BB 0000000A			MOV		EBX, 10
 00000230  F7 F3			DIV		EBX
 00000232  50				PUSH	EAX
 00000233  8B C2			MOV		EAX, EDX
					
 00000235  04 30			ADD		AL, 48
 00000237  AA				STOSB
 00000238  58				POP		EAX
 00000239  83 C1 01			ADD		ECX, 1
 0000023C  EB E3			JMP		_GetNumLoop

 0000023E			_Sign:
					; Check for sign, add negative sign if needed
 0000023E  8B 5D FC			MOV		EBX, DWORD PTR [EBP-4]
 00000241  83 FB 01			CMP		EBX, 1
 00000244  75 06			JNE		_Reverse
 00000246  B0 2D			MOV		AL, 45
 00000248  AA				STOSB
 00000249  83 C1 01			ADD		ECX, 1

				; Pass converted string to local reverse string to correct
				; the order of characters.
 0000024C			_Reverse:
 0000024C  8D 75 E8			LEA		ESI, [EBP-24]
 0000024F  8D 7D D4			LEA		EDI, [EBP-44]
 00000252  03 F1			ADD		ESI, ECX
 00000254  4E				DEC		ESI
 00000255			_RevLoop:
 00000255  FD				STD
 00000256  AC				LODSB
 00000257  FC				CLD
 00000258  AA				STOSB
 00000259  E2 FA			loop	_RevLoop

				; Pass local converted string to display Macro
 0000025B			_display:
 0000025B  8D 75 D4			LEA		ESI, [EBP-44]
					mDisplayString ESI
 0000025E  52		     1		PUSH	EDX
 0000025F  8B D6	     1		MOV		EDX, ESI
 00000261  E8 00000000 E     1		CALL	WriteString
 00000266  5A		     1		POP		EDX

 00000267  5E				POP		ESI
 00000268  5F				POP		EDI
 00000269  5A				POP		EDX
 0000026A  59				POP		ECX
 0000026B  5B				POP		EBX
 0000026C  58				POP		EAX
 0000026D  8B E5			MOV		ESP, EBP
 0000026F  5D				POP		EBP
 00000270  C2 0004			RET		4

 00000273			WriteVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: DisplayArray
				;
				; This procedure displays the validated user inputted values in intArray. The
				; elements from the array are passed to WriteVal to convert the signed integer
				; into a string.
				;
				; Preconditions: intArray must be type SDWORD and contain validated values.
				; ARRAYSIZE must match the number of elements of intArray. Displays must be
				; type BYTE.
				;
				; Postconditions: None
				;
				; Receives: [EBP+20] = address of intArray
				;			[EBP+16] = ARRAYSIZE
				;			[EBP+12] = address of space string
				;			[EBP+8] = address of prompt2
				; Returns: Displays the values of intArray as strings.
				; ---------------------------------------------------------------------------------
 00000273			DisplayArray PROC
 00000273  55				PUSH	EBP
 00000274  8B EC			MOV		EBP, ESP
 00000276  51				PUSH	ECX
 00000277  56				PUSH	ESI

					; Print prompt message
					mDisplayString [EBP+8]
 00000278  52		     1		PUSH	EDX
 00000279  8B 55 08	     1		MOV		EDX, [EBP+8]
 0000027C  E8 00000000 E     1		CALL	WriteString
 00000281  5A		     1		POP		EDX

					; ESI points to first element in array. ECX is the ARRAYSIZE
 00000282  8B 75 14			MOV		ESI, [EBP+20]
 00000285  8B 4D 10			MOV		ECX, [EBP+16]
 00000288			_displayLoop:
 00000288  FF 36			PUSH	[ESI]
 0000028A  E8 FFFFFF2A			CALL	WriteVal
					mDisplayString [EBP+12]
 0000028F  52		     1		PUSH	EDX
 00000290  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000293  E8 00000000 E     1		CALL	WriteString
 00000298  5A		     1		POP		EDX
 00000299  83 C6 04			ADD		ESI, 4
 0000029C  E2 EA			LOOP	_displayLoop
 0000029E  E8 00000000 E		CALL	CrLf

 000002A3  5E				POP		ESI
 000002A4  59				POP		ECX
 000002A5  5D				POP		EBP
 000002A6  C2 0010			RET		16
 000002A9			DisplayArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: CalculateSum
				;
				; This procedure is passed the user's valid inputs stored in intArray and
				; calculates the total sum of all the integers.
				;
				; Preconditions: The intArray must be type SDWORD and filled with validated
				; inputs. ARRAYSIZE must match the number of elements in the array.
				;
				; Postconditions: None
				;
				; Receives: [EBP+16] = address of intArray
				;			[EBP+12] = ARRAYSIZE
				;			[EBP+8] = sum
				;
				; Returns: Changes the variable sum.
				; ---------------------------------------------------------------------------------
 000002A9			CalculateSum PROC
 000002A9  55				PUSH	EBP
 000002AA  8B EC			MOV		EBP, ESP
 000002AC  56				PUSH	ESI
 000002AD  57				PUSH	EDI
 000002AE  50				PUSH	EAX
 000002AF  51				PUSH	ECX
 000002B0  53				PUSH	EBX

				; EAX tracks the running sum total
 000002B1  B8 00000000			MOV		EAX, 0
 000002B6  8B 75 10			MOV		ESI, [EBP+16]
 000002B9  8B 4D 0C			MOV		ECX, [EBP+12]

 000002BC			_StartSum:
					; Move array element into EBX
 000002BC  8B 1E			MOV		EBX, [ESI]
 000002BE  03 C3			ADD		EAX, EBX
 000002C0  83 C6 04			ADD		ESI, 4
 000002C3  E2 F7			LOOP	_StartSum
					
					; Store total sum to variable
 000002C5  8B 7D 08			MOV		EDI, [EBP+8]
 000002C8  89 07			MOV		[EDI], EAX

 000002CA  5B				POP		EBX
 000002CB  59				POP		ECX
 000002CC  58				POP		EAX
 000002CD  5F				POP		EDI
 000002CE  5E				POP		ESI
 000002CF  5D				POP		EBP

 000002D0  C2 000C			RET		12
 000002D3			CalculateSum ENDP

				; ---------------------------------------------------------------------------------
				; Name: DisplaySum
				;
				; This procedure displays the calculated sum. The signed integer value of the
				; sum is passed to the WriteVal procedure to convert it into a string.
				; 
				; Preconditions: prompts to be displayed must be type BYTE. The sum is type SDWORD.
				; 
				; Postconditions: None
				; Receives: [EBP+12] = sum
				;			[EBP+8] = address for sumMsg
				; Returns: None
				; ---------------------------------------------------------------------------------
 000002D3			DisplaySum PROC
 000002D3  55				PUSH	EBP
 000002D4  8B EC			MOV		EBP, ESP
 000002D6  56				PUSH	ESI

 000002D7  8B 75 0C			MOV		ESI, [EBP+12]

					; Display Prompt
					mDisplayString [EBP+8]
 000002DA  52		     1		PUSH	EDX
 000002DB  8B 55 08	     1		MOV		EDX, [EBP+8]
 000002DE  E8 00000000 E     1		CALL	WriteString
 000002E3  5A		     1		POP		EDX
 000002E4  56				PUSH	ESI
 000002E5  E8 FFFFFECF			CALL	WriteVal
 000002EA  E8 00000000 E		CALL	CrLf

 000002EF  5E				POP		ESI
 000002F0  5D				POP		EBP
 000002F1  C2 0008			RET		8
 000002F4			DisplaySum ENDP

				; ---------------------------------------------------------------------------------
				; Name: RoundedAverage
				;
				; This procedure calculates the rounded average by dividing the total sum by the
				; ARRAYSIZE global variable. The quotient is stored in the roundAvg data variable.
				;
				; Preconditions: The sum must be calculated and type SDWORD. The ARRAYSIZE
				; needs to match the number of elements totaled from the intArray.
				;
				; Postconditions: None
				; 
				; Receives: [EBP+16] = roundAvg
				;			[EBP+12] = ARRAYSIZE
				;			[EBP+8] = sum
				;
				; Returns: Changes the roundAvg variable.
				; ---------------------------------------------------------------------------------
 000002F4			RoundedAverage PROC
 000002F4  55				PUSH	EBP
 000002F5  8B EC			MOV		EBP, ESP
 000002F7  50				PUSH	EAX
 000002F8  52				PUSH	EDX
 000002F9  53				PUSH	EBX
 000002FA  56				PUSH	ESI

					; Move sum to EAX, ARRAYSIZE to EBX
 000002FB  8B 45 08			MOV		EAX, SDWORD PTR [EBP+8]
 000002FE  99				CDQ
 000002FF  8B 5D 0C			MOV		EBX, [EBP+12]
 00000302  F7 FB			IDIV	EBX

					; Store quotient in rounded average
 00000304  8B 75 10			MOV		ESI, [EBP+16]
 00000307  89 06			MOV		[ESI], EAX

 00000309  5E				POP		ESI
 0000030A  5B				POP		EBX
 0000030B  5A				POP		EDX
 0000030C  58				POP		EAX
 0000030D  5D				POP		EBP

 0000030E  C2 000C			RET		12
 00000311			RoundedAverage ENDP

				; ---------------------------------------------------------------------------------
				; Name: DisplayAvg
				;
				; This procedure displays the rounded average. The signed integer value of the
				; average is passed to the WriteVal procedure to convert it into a string.
				; 
				; Preconditions: prompts to be displayed must be type BYTE. The rounded average
				; is type SDWORD.
				; 
				; Postconditions: None
				; Receives: [EBP+12] = roundAvg
				;			[EBP+8] = address for avgMsg
				; Returns: None
				; ---------------------------------------------------------------------------------
 00000311			DisplayAvg PROC
 00000311  55				PUSH	EBP
 00000312  8B EC			MOV		EBP, ESP
 00000314  56				PUSH	ESI

 00000315  8B 75 0C			MOV		ESI, [EBP+12]

					; Display Prompt
					mDisplayString [EBP+8]
 00000318  52		     1		PUSH	EDX
 00000319  8B 55 08	     1		MOV		EDX, [EBP+8]
 0000031C  E8 00000000 E     1		CALL	WriteString
 00000321  5A		     1		POP		EDX
 00000322  56				PUSH	ESI
 00000323  E8 FFFFFE91			CALL	WriteVal
 00000328  E8 00000000 E		CALL	CrLf

 0000032D  5E				POP		ESI
 0000032E  5D				POP		EBP
 0000032F  C2 0008			RET		8
 00000332			DisplayAvg ENDP
				; ---------------------------------------------------------------------------------
				; Name: Goodbye
				;
				; Displays a goodbye message to the user.
				; Preconditions: byeMsg type BYTE.
				; Postconditions: EDX changed by WriteString
				; Receives: [EBP+8] = reference to byeMsg
				; Returns:  None
				; ---------------------------------------------------------------------------------
 00000332			Goodbye PROC
 00000332  55				PUSH	EBP
 00000333  8B EC			MOV		EBP, ESP

 00000335  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP+8]
 0000033A  52		     1		PUSH	EDX
 0000033B  8B 55 08	     1		MOV		EDX, [EBP+8]
 0000033E  E8 00000000 E     1		CALL	WriteString
 00000343  5A		     1		POP		EDX
					
 00000344  5D				POP		EBP
 00000345  C2 0004			RET		4
 00000348			Goodbye ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29333.0	    12/06/20 19:43:33
!Project_6    (Proj6_moorbrea.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc
mTempString  . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002A9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000348 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateSum . . . . . . . . . .	P Near	 000002A9 _TEXT	Length= 0000002A Public STDCALL
  _StartSum  . . . . . . . . . .	L Near	 000002BC _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayArray . . . . . . . . . .	P Near	 00000273 _TEXT	Length= 00000036 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 00000288 _TEXT	
DisplayAvg . . . . . . . . . . .	P Near	 00000311 _TEXT	Length= 00000021 Public STDCALL
DisplaySum . . . . . . . . . . .	P Near	 000002D3 _TEXT	Length= 00000021 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Goodbye  . . . . . . . . . . . .	P Near	 00000332 _TEXT	Length= 00000016 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000000A6 _TEXT	Length= 0000001B Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000C1 _TEXT	Length= 000000F8 Public STDCALL
  _nextInput . . . . . . . . . .	L Near	 000000D3 _TEXT	
  _getString . . . . . . . . . .	L Near	 000000D4 _TEXT	
  _updateArray . . . . . . . . .	L Near	 000000F4 _TEXT	
  _start . . . . . . . . . . . .	L Near	 00000101 _TEXT	
  _validate  . . . . . . . . . .	L Near	 00000112 _TEXT	
  _inputError  . . . . . . . . .	L Near	 00000144 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 00000179 _TEXT	
  _finalize  . . . . . . . . . .	L Near	 0000018F _TEXT	
  _Negate  . . . . . . . . . . .	L Near	 000001A8 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001AF _TEXT	
RoundedAverage . . . . . . . . .	P Near	 000002F4 _TEXT	Length= 0000001D Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001B9 _TEXT	Length= 000000BA Public STDCALL
  ??0000 . . . . . . . . . . . .	L Near	 000001DB _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 000001F1 _TEXT	
  _CheckZero . . . . . . . . . .	L Near	 0000020A _TEXT	
  _Start . . . . . . . . . . . .	L Near	 00000218 _TEXT	
  _GetNumLoop  . . . . . . . . .	L Near	 00000221 _TEXT	
  _Sign  . . . . . . . . . . . .	L Near	 0000023E _TEXT	
  _Reverse . . . . . . . . . . .	L Near	 0000024C _TEXT	
  _RevLoop . . . . . . . . . . .	L Near	 00000255 _TEXT	
  _display . . . . . . . . . . .	L Near	 0000025B _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A6 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 0000028E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byeMsg . . . . . . . . . . . . .	Byte	 000001D8 _DATA	
counter  . . . . . . . . . . . .	DWord	 00000240 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 0000016D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputRetry . . . . . . . . . . .	Byte	 000001C5 _DATA	
intArray . . . . . . . . . . . .	DWord	 00000218 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000004A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt1  . . . . . . . . . . . .	Byte	 0000014D _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000244 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
roundAvg . . . . . . . . . . . .	DWord	 00000214 _DATA	
space  . . . . . . . . . . . . .	Byte	 0000028C _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 0000026C _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000210 _DATA	
userNumSize  . . . . . . . . . .	Byte	 0000020F _DATA	
userNumString  . . . . . . . . .	Byte	 00000203 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
